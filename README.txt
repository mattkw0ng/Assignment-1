INSERTING:
In my program, I found that the binary search tree was faster at inserting items than the prefix trie.For inserting items, a BST usually has a worst case runtime of O(n), however, by optimizing the way items are inserted to the tree, I greatly reduced this time and the runtime was probably closer to the best-case scenario of O(log(n)). A trie on the other hand has a best and worst case runtime of O(M) where M is the length of the longest string, and because of the way that my program inserted items into the data structures, this meant that the binary search tree is faster. 

SUGGESTING:
For the BST, the worst case runtime would be O(n*log(n)) as it essentially performs a the search function n times, where n is the length of the given string. Also note that a BST would usually have worst case runtime of O(n^2) for this operation but since by tree was balanced, searching would only take O(log(n)). For the trie, the worst case runtime should be O(n) where n is the length of the input. The suggestion function essentially calls the search function 3 times, and then does a sort of modified search, and these all take O(n) time so the result it O(4n), which is still O(n). Because of this, finding a suggestion is faster in the trie rather than the BST.